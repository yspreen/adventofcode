from itertools import product
import copy

input = """
.#.#...|#.
.....#|##|
.|..|...#.
..|#.....#
#.#|||#|#|
...#.||...
.|....|...
||...#|.#|
|.||||..|.
...#.|..|.
"""

input = """
#||.....|......|##.#.#|....|#.#|#.|....#|#||#.....
...#|#..#..#|.#...#|..|....##....|.#.|.#.......#..
|#.|#...|...|.##.|..#.#.....##.........##|..|.|...
...#..|....|.....#.............|..|.....|...|...#.
..|#..||..|####.#|#...##..|#|||#.#.###...#....#...
..|....||.#..|#|||..##.#.|#.||...|..#|..|.#....#..
#||..|..|#.|.###..........||.|.|..#.#..#||........
.|||#..#.|....#......##....#...#.|...#|.||.....#..
#.||.|#..|#.#.|#|....|.##|..#.....#.|#|..|.||#..#.
#|........|.#.....#....|#.|.|.##..#.|#.|.|...|....
|.|..#.#.##|.|#..#.#.#.|#||#|.#.#....#..|..#..|...
..#..||#|#...|#||...|#|.|.#..##.#.#....#.....||.#.
#..|||#...|..|#||.|#.....|.|##.........|||..#...|#
...|....#..|....|.||..|#....##..#....|.#|..#....|.
#.###|.|#|.##..|...|..|...||.......#|##.#|.||#|..#
|....|.#.|.#......|...#|||..||#.##..#.....#|..#.#.
..#|#...##....##..|.|.|#.|.||....|...#..|#.|...|..
|......|..|.#.....#...|........|.....#|#.#.|#.#.|.
||.|#..#.###..|.#.......||.#.#...#.#.|#....#|....#
#.|..|#..#||.....#..||.||.|##|#..#|.....#.#..###..
|.|#|.#.|..|||.|....#....####||.|.|##..|.|..||##|.
.....##...#..|#.|||..|..|..#||.#..#...|.|.####|#..
..|.#...|...#....#|..|.||.#...|##..|.#...#..||....
|.#|....|....|....|....|#..##..#....#|..||..||....
#..|.#.||..|..##.|...##...|...|#..|.||...#|.|....#
|....#||.##|.|#..#|.#..|...||..|.||..|...|.......#
##....|..#|||..|...#...#...|#..#|.|.#..||.#.#.#...
|#....||.#.#||.|#|.#.||..###.|.|.....#|...#.#...#.
.|.#|#.|......#.#..............#....|..||..||#||..
##.|...|...#.#|#|.#|.|.###...#..#..|..##|#|.||....
....#|#..#....|.|...|....||...##.....|.|.|.|.#||.|
.|#||||...#.#..##..##|||........##...#...|..#.|...
|.|.#|||.||..##..#|.......#.#|##..|.......|##.##..
...#.|#..#...|.|#.|...|#.#.#..|....||....#|...|..|
###|.#..#..#..####.#....###....#.#.#.|.|||...|#..#
##...#...#..#.....#|#|.|....||#..||||#..#.#.#...||
...#..|.|...##..|...|#........||.|.|.|..#....#|.#|
.........###|.....|#.|......|.......|.##.|...|...|
..........#.|..#..#.|....##.||....#|.##....|....||
..|#|.....|#...#..###||.##...#...#......|..#..|.#.
|...|..|||.||...|.#|....#|.|...|...#.|..|..||.#|#.
...#||...##.##.|...#....|...||..|..|..#..|.#..#||#
.|.||.#|..|.|##......#.......##....|#.#|.|.#.#..|.
..#..|..|..#...#.#..#|#|#|||...|......#.##...|....
.##..||.##|..|..|.|#.....|.|#..|....|#..|...#...|.
..|.|.|||.||..|..#.|..#.....|##|.|..|..###..#....|
|#...#.#|.#..|..#..|##.##||.||#.....|..#....#.|###
#..|..........##..|#.|..#.|.###.|..|.....|#|.#....
#.....#|#...|..|..|.|....##......|||..|.|...|.....
|..|...#.#.|....|......#|...##......|.##|.....|.#.
"""

input = input.split("\n")
input = list(filter(None, input))

chars = {
    ".": 0,  # open
    "|": 1,  # tree
    "#": 2,  # lumber
}
format = {
    v: k for (k, v) in chars.items()
}


def print_arr(arr, format=None):
    out = ""
    for y in range(len(arr[0])):
        line = ""
        for x in range(len(arr)):
            line += ("%d" % arr[x][y]) if format is None else format[arr[x][y]]
        out += line + "\n"
    print(out, end="")


class hashable_area:
    def __init__(self, area, clone=False):
        self.area = area if not clone else copy.deepcopy(area)

    def __hash__(self):
        h = 0
        for r in self.area:
            for i in r:
                h *= 4
                h += i
        return h

    def __repr__(self):
        return self.__str__()

    def __str__(self):
        return str(self.area)


#ha = hashable_area
def ha(arr, *_):
    a = "".join(["".join([str(j) for j in i]) for i in arr])
    return a


areas = {}
for i in product('012', repeat=8):
    i = "".join(i)
    opens = i.count('0')
    trees = i.count('1')
    lumbs = i.count('2')

    i = [int(j) for j in i]
    area = [[0 for _ in range(3)] for _ in range(3)]
    area[0][0] = i[0]
    area[1][0] = i[1]
    area[2][0] = i[2]
    area[0][1] = i[3]
    area[2][1] = i[4]
    area[0][2] = i[5]
    area[1][2] = i[6]
    area[2][2] = i[7]

    for m in [0, 1, 2]:
        area[1][1] = m
        n = m
        if m == 0 and trees >= 3:
            n = 1
        if m == 1 and lumbs >= 3:
            n = 2
        if m == 2 and (lumbs == 0 or trees == 0):
            n = 0
        areas[ha(area)] = n


def unpad_zero(arr):
    del arr[-1]
    del arr[0]
    for i in arr:
        del i[-1]
        del i[0]


def pad_zero(arr):
    for col in arr:
        col.insert(0, 0)
        col.append(0)
    arr.insert(0, [0 for _ in arr[0]])
    arr.append([0 for _ in arr[0]])


def main():
    global input, format, areas

    input_ = [[0 for _ in input] for _ in input[0]]
    for y in range(len(input)):
        for x in range(len(input[0])):
            input_[x][y] = chars[input[y][x]]
    input = input_

    len_x = len(input)
    len_y = len(input[0])

    last = 0
    for minute in range(1000000000):
        pad_zero(input)
        new_input = copy.deepcopy(input)
        for x in range(len_x):
            for y in range(len_y):
                area = [[0 for _ in range(3)] for _ in range(3)]
                for i in range(3):
                    for j in range(3):
                        area[i][j] = input[x + i][y + j]
                new_input[x + 1][y + 1] = areas[ha(area)]

        unpad_zero(new_input)
        input = new_input
        # print_arr(input, format)
        # print("")
        trees = sum([i.count(1) for i in input])
        lumbs = sum([i.count(2) for i in input])
        prod = trees * lumbs
        print(minute+1, trees, lumbs, prod, prod-last)
        last = prod


main()
