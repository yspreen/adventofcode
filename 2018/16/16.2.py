input = """
9 2 0 1
9 0 1 0
9 3 0 3
10 3 1 1
8 1 1 1
14 1 2 2
7 2 2 1
9 1 3 3
9 1 2 0
9 3 0 2
8 3 2 3
8 3 1 3
14 3 1 1
7 1 3 2
9 1 2 3
8 0 0 0
0 0 2 0
8 1 0 1
0 1 3 1
15 3 0 0
8 0 3 0
8 0 2 0
14 2 0 2
7 2 1 1
9 1 2 2
8 0 0 0
0 0 3 0
9 0 3 3
1 0 2 2
8 2 1 2
14 2 1 1
7 1 0 2
8 2 0 3
0 3 2 3
9 2 1 0
9 3 3 1
4 0 3 0
8 0 3 0
14 0 2 2
9 1 1 3
9 1 2 1
9 1 0 0
14 1 3 0
8 0 1 0
14 0 2 2
9 2 1 1
9 2 2 0
6 0 3 1
8 1 2 1
8 1 2 1
14 1 2 2
7 2 2 1
9 1 0 0
8 1 0 3
0 3 0 3
9 3 0 2
12 3 2 0
8 0 3 0
8 0 1 0
14 0 1 1
9 1 2 0
8 3 0 3
0 3 1 3
9 0 0 2
8 0 2 2
8 2 2 2
14 1 2 1
9 2 0 0
8 0 0 2
0 2 2 2
6 0 3 0
8 0 1 0
8 0 3 0
14 0 1 1
7 1 0 3
9 2 3 0
9 3 3 2
9 3 0 1
1 1 2 2
8 2 2 2
14 3 2 3
7 3 3 0
9 0 1 2
9 0 1 1
9 3 1 3
1 3 2 2
8 2 3 2
14 0 2 0
7 0 0 3
9 2 2 0
9 1 1 1
9 3 2 2
13 0 2 1
8 1 2 1
8 1 2 1
14 3 1 3
7 3 0 1
9 2 2 3
9 0 1 2
12 2 3 2
8 2 1 2
14 1 2 1
8 1 0 2
0 2 2 2
9 1 2 3
8 2 0 0
0 0 1 0
7 0 2 0
8 0 3 0
8 0 2 0
14 1 0 1
7 1 0 0
8 3 0 2
0 2 1 2
9 1 3 1
14 1 3 3
8 3 1 3
8 3 3 3
14 0 3 0
9 2 1 1
9 0 1 3
9 2 3 3
8 3 2 3
8 3 3 3
14 0 3 0
7 0 2 1
9 1 2 3
9 2 1 0
6 0 3 2
8 2 3 2
14 1 2 1
7 1 2 3
9 1 1 0
9 2 1 2
9 3 1 1
0 0 1 2
8 2 2 2
14 2 3 3
7 3 1 0
9 2 1 3
8 0 0 2
0 2 3 2
9 0 0 1
9 2 1 2
8 2 3 2
8 2 3 2
14 0 2 0
7 0 1 2
9 1 2 3
9 2 3 1
9 3 2 0
10 0 1 0
8 0 2 0
14 2 0 2
7 2 0 3
8 2 0 2
0 2 3 2
9 2 1 0
8 1 0 1
0 1 3 1
10 1 0 1
8 1 2 1
8 1 3 1
14 1 3 3
7 3 2 0
9 1 0 1
9 1 3 3
9 2 3 1
8 1 2 1
14 1 0 0
7 0 3 2
9 2 3 0
9 3 0 3
9 2 1 1
10 3 0 1
8 1 3 1
14 2 1 2
7 2 0 0
9 3 0 2
9 3 0 1
9 2 1 3
10 1 3 3
8 3 2 3
14 3 0 0
7 0 0 2
9 1 3 3
9 2 0 0
9 1 1 1
6 0 3 0
8 0 1 0
14 0 2 2
7 2 0 3
8 2 0 0
0 0 1 0
9 2 0 2
9 2 3 1
7 0 2 0
8 0 2 0
14 0 3 3
9 3 2 1
9 1 0 2
9 1 0 0
0 0 1 0
8 0 2 0
14 3 0 3
7 3 3 1
9 2 2 3
9 2 0 2
9 1 3 0
7 0 2 3
8 3 3 3
8 3 2 3
14 1 3 1
9 0 3 2
9 3 3 3
8 0 2 3
8 3 2 3
8 3 2 3
14 3 1 1
8 1 0 0
0 0 0 0
9 1 3 3
9 3 0 2
8 3 2 2
8 2 2 2
14 1 2 1
7 1 0 2
9 2 0 0
9 0 2 1
9 2 1 3
5 0 3 3
8 3 1 3
8 3 3 3
14 2 3 2
9 1 2 3
9 1 0 1
15 3 0 0
8 0 2 0
14 0 2 2
7 2 0 0
9 1 2 2
9 2 0 3
15 1 3 2
8 2 1 2
14 2 0 0
9 0 0 3
8 3 0 2
0 2 2 2
9 0 1 1
5 2 3 1
8 1 1 1
8 1 3 1
14 0 1 0
9 3 2 2
9 3 0 1
9 2 2 3
1 1 2 2
8 2 3 2
14 2 0 0
7 0 1 3
9 2 3 2
9 2 2 0
11 0 1 2
8 2 1 2
14 3 2 3
7 3 0 1
9 2 3 2
9 1 1 0
9 3 3 3
7 0 2 3
8 3 1 3
14 1 3 1
9 3 3 2
8 1 0 3
0 3 3 3
8 3 0 0
0 0 2 0
13 0 2 2
8 2 2 2
8 2 2 2
14 1 2 1
9 2 2 2
9 1 3 3
6 0 3 2
8 2 3 2
14 1 2 1
7 1 0 2
9 3 3 1
9 1 0 0
0 3 1 1
8 1 3 1
14 2 1 2
7 2 1 1
9 2 1 0
8 3 0 3
0 3 3 3
9 3 3 2
3 0 2 2
8 2 1 2
8 2 1 2
14 2 1 1
7 1 2 2
8 2 0 3
0 3 1 3
9 0 1 1
6 0 3 1
8 1 1 1
14 2 1 2
9 0 3 1
9 3 2 0
9 2 3 3
10 0 3 1
8 1 2 1
8 1 2 1
14 2 1 2
7 2 3 3
9 0 1 2
9 1 0 0
9 3 3 1
8 0 2 1
8 1 1 1
14 3 1 3
7 3 1 2
9 2 0 1
9 0 2 3
9 2 3 0
5 1 3 1
8 1 3 1
8 1 1 1
14 1 2 2
7 2 0 1
9 3 2 0
8 0 0 2
0 2 0 2
9 3 2 3
13 2 0 0
8 0 3 0
14 1 0 1
8 3 0 2
0 2 2 2
8 1 0 0
0 0 1 0
7 0 2 2
8 2 3 2
8 2 1 2
14 1 2 1
7 1 2 2
9 0 0 3
8 2 0 1
0 1 1 1
14 0 0 0
8 0 2 0
14 2 0 2
7 2 3 3
8 2 0 0
0 0 3 0
8 0 0 1
0 1 3 1
9 0 0 2
1 0 2 0
8 0 1 0
14 0 3 3
7 3 2 1
9 1 2 3
9 2 1 0
6 0 3 0
8 0 2 0
8 0 3 0
14 0 1 1
7 1 0 3
9 2 0 2
9 1 1 0
8 2 0 1
0 1 2 1
7 0 2 1
8 1 2 1
8 1 3 1
14 3 1 3
9 1 1 1
7 0 2 1
8 1 1 1
14 1 3 3
7 3 3 2
9 2 0 3
9 3 1 1
0 0 1 0
8 0 1 0
14 2 0 2
7 2 0 3
8 0 0 2
0 2 1 2
9 2 0 0
1 1 2 1
8 1 1 1
14 1 3 3
7 3 1 2
9 1 2 1
9 2 0 3
15 1 3 0
8 0 2 0
14 0 2 2
9 3 2 3
9 2 0 0
9 3 2 1
11 0 1 0
8 0 3 0
14 0 2 2
7 2 3 3
9 3 1 0
9 3 3 2
9 1 2 1
8 1 2 1
8 1 1 1
8 1 3 1
14 3 1 3
7 3 0 0
9 2 2 2
8 1 0 3
0 3 0 3
9 0 2 1
2 3 2 1
8 1 1 1
14 1 0 0
7 0 0 1
9 2 1 0
9 3 2 2
12 3 2 2
8 2 3 2
14 2 1 1
7 1 0 2
8 0 0 1
0 1 3 1
9 2 3 3
10 1 3 1
8 1 2 1
14 1 2 2
7 2 2 1
9 1 0 2
5 0 3 0
8 0 1 0
14 0 1 1
7 1 3 3
9 3 3 2
9 2 0 0
9 3 1 1
13 0 2 2
8 2 3 2
8 2 1 2
14 3 2 3
9 3 3 2
8 2 0 1
0 1 0 1
3 0 2 1
8 1 3 1
8 1 3 1
14 1 3 3
7 3 2 1
9 1 3 3
13 0 2 2
8 2 2 2
14 2 1 1
7 1 2 0
9 2 1 3
9 1 0 1
9 2 0 2
5 2 3 3
8 3 1 3
14 0 3 0
8 1 0 3
0 3 2 3
9 3 1 1
10 1 3 1
8 1 3 1
8 1 1 1
14 0 1 0
9 3 3 1
9 3 2 3
11 2 1 1
8 1 2 1
8 1 1 1
14 1 0 0
7 0 0 1
9 0 2 2
8 2 0 0
0 0 3 0
8 1 0 3
0 3 2 3
13 2 0 3
8 3 3 3
14 3 1 1
9 1 1 2
8 1 0 3
0 3 1 3
14 3 3 3
8 3 3 3
14 3 1 1
7 1 3 3
9 3 0 2
9 1 0 1
9 2 1 0
8 0 1 0
8 0 2 0
14 0 3 3
7 3 3 2
8 3 0 0
0 0 2 0
8 3 0 1
0 1 3 1
9 1 1 3
6 0 3 0
8 0 2 0
14 2 0 2
9 1 0 1
9 2 1 3
9 0 2 0
15 1 3 1
8 1 3 1
14 2 1 2
7 2 3 1
9 1 3 0
9 3 1 2
9 0 0 3
12 3 2 3
8 3 1 3
14 3 1 1
7 1 1 2
9 1 1 3
9 2 3 0
9 0 1 1
15 3 0 0
8 0 2 0
14 0 2 2
7 2 3 0
8 1 0 1
0 1 2 1
9 0 2 3
9 2 2 2
2 3 2 3
8 3 3 3
14 0 3 0
7 0 0 2
9 3 3 0
9 2 2 3
3 1 0 1
8 1 1 1
14 1 2 2
9 0 1 1
10 0 3 0
8 0 1 0
8 0 2 0
14 0 2 2
8 3 0 0
0 0 2 0
4 0 3 3
8 3 3 3
14 3 2 2
7 2 3 0
8 0 0 3
0 3 1 3
9 3 2 1
9 2 0 2
14 3 3 1
8 1 3 1
14 1 0 0
7 0 1 2
9 1 0 0
9 2 0 3
9 3 0 1
10 1 3 3
8 3 2 3
14 2 3 2
7 2 2 1
8 3 0 3
0 3 0 3
9 2 1 2
8 3 0 0
0 0 3 0
11 2 0 3
8 3 1 3
8 3 1 3
14 1 3 1
9 1 0 3
9 3 2 2
9 2 0 0
13 0 2 3
8 3 2 3
14 3 1 1
8 3 0 3
0 3 3 3
8 0 0 0
0 0 1 0
8 0 2 0
8 0 3 0
14 1 0 1
7 1 1 3
9 1 3 1
9 2 1 0
13 0 2 0
8 0 2 0
8 0 2 0
14 3 0 3
7 3 3 0
8 0 0 3
0 3 3 3
9 0 2 1
1 3 2 2
8 2 2 2
14 2 0 0
9 3 2 2
9 3 1 1
1 3 2 1
8 1 3 1
8 1 1 1
14 1 0 0
7 0 2 2
9 3 3 1
9 1 2 0
9 1 0 3
0 0 1 1
8 1 3 1
14 2 1 2
7 2 3 1
8 3 0 2
0 2 3 2
8 3 0 0
0 0 2 0
9 2 1 3
4 0 3 0
8 0 1 0
14 0 1 1
9 3 1 3
9 2 3 2
9 2 0 0
10 3 0 0
8 0 3 0
14 1 0 1
8 0 0 3
0 3 0 3
9 1 0 0
7 0 2 2
8 2 1 2
14 1 2 1
9 3 0 0
8 2 0 2
0 2 0 2
13 2 0 2
8 2 3 2
14 1 2 1
9 3 0 2
9 2 2 3
9 2 2 0
3 0 2 3
8 3 2 3
14 3 1 1
7 1 2 2
9 2 0 3
8 1 0 1
0 1 1 1
4 0 3 3
8 3 3 3
8 3 1 3
14 3 2 2
7 2 2 1
9 3 0 0
8 0 0 2
0 2 0 2
9 2 1 3
13 2 0 2
8 2 3 2
14 1 2 1
7 1 1 2
9 0 1 1
9 1 0 0
8 3 0 3
0 3 3 3
0 0 1 1
8 1 1 1
14 1 2 2
7 2 3 1
9 2 3 0
9 2 1 3
9 2 0 2
4 0 3 3
8 3 3 3
14 1 3 1
9 1 1 3
8 1 0 2
0 2 0 2
6 0 3 3
8 3 3 3
14 3 1 1
7 1 1 3
9 1 2 0
9 3 0 1
9 3 1 2
0 0 1 0
8 0 1 0
14 0 3 3
7 3 3 1
8 1 0 0
0 0 1 0
9 2 2 3
9 2 0 2
7 0 2 0
8 0 2 0
14 0 1 1
7 1 0 2
9 1 0 3
9 2 1 1
9 1 1 0
14 0 0 1
8 1 1 1
8 1 2 1
14 1 2 2
7 2 1 3
9 2 3 0
9 3 1 2
9 2 3 1
13 0 2 0
8 0 3 0
14 3 0 3
7 3 0 2
9 3 1 1
9 1 0 3
9 2 2 0
11 0 1 3
8 3 1 3
14 2 3 2
7 2 2 1
8 2 0 0
0 0 1 0
9 2 1 2
9 1 3 3
7 0 2 3
8 3 3 3
14 3 1 1
7 1 2 0
9 0 1 3
9 1 1 1
2 3 2 2
8 2 1 2
14 2 0 0
7 0 3 3
9 3 0 1
9 1 3 0
8 3 0 2
0 2 2 2
0 0 1 1
8 1 2 1
14 1 3 3
7 3 1 2
9 2 1 1
9 1 2 3
9 2 1 0
6 0 3 0
8 0 1 0
8 0 3 0
14 0 2 2
9 2 1 3
9 1 3 1
9 2 1 0
4 0 3 1
8 1 3 1
8 1 1 1
14 1 2 2
7 2 3 1
9 1 3 2
9 3 3 0
9 0 2 3
9 2 0 2
8 2 1 2
14 2 1 1
9 3 2 3
8 1 0 2
0 2 0 2
9 2 2 0
10 3 0 3
8 3 2 3
14 1 3 1
9 0 1 3
9 2 1 2
2 3 2 0
8 0 2 0
14 1 0 1
7 1 0 3
9 3 0 0
9 0 3 1
11 2 0 0
8 0 2 0
14 3 0 3
9 3 3 2
9 3 2 0
9 2 1 1
1 0 2 0
8 0 3 0
14 3 0 3
7 3 0 2
8 1 0 0
0 0 2 0
9 1 0 3
8 0 0 1
0 1 0 1
6 0 3 3
8 3 2 3
8 3 1 3
14 3 2 2
7 2 0 3
9 3 2 2
13 0 2 2
8 2 1 2
14 3 2 3
7 3 3 1
8 0 0 3
0 3 1 3
9 3 1 0
9 2 0 2
11 2 0 3
8 3 1 3
14 3 1 1
9 0 1 3
9 0 1 0
2 3 2 2
8 2 2 2
8 2 2 2
14 2 1 1
7 1 3 3
9 0 2 2
9 3 1 1
1 1 2 2
8 2 3 2
14 2 3 3
7 3 3 0
"""

import re

input = input.split("\n")
input = list(filter(None, input))
units = []

def do_operation(reg, op):
    out = [j for j in reg]
    if op[0] == 14:
        out[op[3]] = reg[op[1]] + reg[op[2]]
    elif op[0] == 0:
        out[op[3]] = reg[op[1]] + op[2]
    elif op[0] == 15:
        out[op[3]] = reg[op[1]] * reg[op[2]]
    elif op[0] == 8:
        out[op[3]] = reg[op[1]] * op[2]
    elif op[0] == 10:
        out[op[3]] = reg[op[1]] & reg[op[2]]
    elif op[0] == 1:
        out[op[3]] = reg[op[1]] & op[2]
    elif op[0] == 3:
        out[op[3]] = reg[op[1]] | reg[op[2]]
    elif op[0] == 5:
        out[op[3]] = reg[op[1]] | op[2]
    elif op[0] == 7:
        out[op[3]] = reg[op[1]]
    elif op[0] == 9:
        out[op[3]] = op[1]
    elif op[0] == 2:
        out[op[3]] = 1 if op[1] > reg[op[2]] else 0
    elif op[0] == 11:
        out[op[3]] = 1 if reg[op[1]] > op[2] else 0
    elif op[0] == 6:
        out[op[3]] = 1 if reg[op[1]] > reg[op[2]] else 0
    elif op[0] == 12:
        out[op[3]] = 1 if op[1] == reg[op[2]] else 0
    elif op[0] == 13:
        out[op[3]] = 1 if reg[op[1]] == op[2] else 0
    elif op[0] == 4:
        out[op[3]] = 1 if reg[op[1]] == reg[op[2]] else 0
    else:
        return None
    
    return out
"""
addr (add register) stores into register C the result of adding register A and register B.
addi (add immediate) stores into register C the result of adding register A and value B.
Multiplication:

mulr (multiply register) stores into register C the result of multiplying register A and register B.
muli (multiply immediate) stores into register C the result of multiplying register A and value B.
Bitwise AND:

banr (bitwise AND register) stores into register C the result of the bitwise AND of register A and register B.
bani (bitwise AND immediate) stores into register C the result of the bitwise AND of register A and value B.
Bitwise OR:

borr (bitwise OR register) stores into register C the result of the bitwise OR of register A and register B.
bori (bitwise OR immediate) stores into register C the result of the bitwise OR of register A and value B.
Assignment:

setr (set register) copies the contents of register A into register C. (Input B is ignored.)
seti (set immediate) stores value A into register C. (Input B is ignored.)
Greater-than testing:

gtir (greater-than immediate/register) sets register C to 1 if value A is greater than register B. Otherwise, register C is set to 0.
gtri (greater-than register/immediate) sets register C to 1 if register A is greater than value B. Otherwise, register C is set to 0.
gtrr (greater-than register/register) sets register C to 1 if register A is greater than register B. Otherwise, register C is set to 0.
Equality testing:

eqir (equal immediate/register) sets register C to 1 if value A is equal to register B. Otherwise, register C is set to 0.
eqri (equal register/immediate) sets register C to 1 if register A is equal to value B. Otherwise, register C is set to 0.
eqrr (equal register/register) sets register C to 1 if register A is equal to register B. Otherwise, register C is set to 0.
"""

def change_opcode(reg, op, code):
    op[0] = code
    return do_operation(reg, op)

input_ = []
for i in range(len(input))[::1]:
    i1 = [int(j) for j in re.sub(r'[^0-9 ]', '', input[i]).split(" ")]
    input_.append(i1)
input = input_

def main():
    global input
    
    # for i in input:
    #     correct = 0
    #     was = i[1][0]
    #     code = 0
    #     for j in range(16):
    #         if change_opcode(i[0], i[1], j) == i[2]:
    #             correct += 1
    #             code = i[1][0]
    #     if correct == 1:
    #         print(code, was)
    reg = [0 for _ in range(4)]
    for i in input:
        # if do_operation(i[0], i[1]) != i[2]:
        #     print("wrong")
        reg = do_operation(reg, i)
    print(reg)

main()